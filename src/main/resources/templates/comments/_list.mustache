<div id ="comments-list">
    {{#commentsDtos}}
        <div class="card m-2" id="comments-{{id}}">
            <div class="card-header">
                {{nickname}}
                <!--    수정 버튼을 넣을 위치 지정함.-->
                <!-- Button trigger modal -->
                <!--    data-bs-toggle="modal" : 클릭하면 모달이 나타나고 다시 클릭하면 모달이 사라짐
                        data-bs-target ="#exampleModel" : 해당 id의 모달을 실행함.
                        data-로 시작하는 속성을 데이터 속성이라고 한다.
                        데이터 속성은 html 요소에 추가정보를 저장하고 싶을 때 사용한다.
                        -->
                <button type="button"
                        class="btn btn-sm btn-outline-primary"
                        data-bs-toggle="modal"
                        data-bs-target="#comment-edit-modal"
                        data-bs-id="{{id}}"
                        data-bs-nickname="{{nickname}}"
                        data-bs-body="{{body}}"
                        data-bs-article-id="{{articleId}}">
                    수정</button>
<!--  댓글 삭제 버튼을 생성함    -->
                <button type="button"
                        class="btn btn-sm btn-outline-danger comment-delete-btn"
                        data-comment-id ="{{id}}">
                    삭제
                </button>
            </div>
            <div class="card-body">
                {{body}}
            </div>
        </div>
    {{/commentsDtos}}
</div>

<!-- Modal -->
<div class="modal fade" id="comment-edit-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">
                    댓글 수정</h5>
                <button type="button"
                        class="btn-close"
                        data-bs-dismiss="modal"
                        aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- 댓글 수정 폼 -->
                <form>
                    <!-- 닉네임 입력 -->
                    <div class="mb-3">
                        <label class="form-label">닉네임</label>
                        <input type="text" class="form-control"
                               id="edit-comment-nickname">
                    </div>
                    <!-- 댓글 본문 입력 -->
                    <div class="mb-3">
                        <label class="form-label">댓글 내용</label>
                        <textarea type="text" class="form-control" rows="3"
                                  id="edit-comment-body"></textarea>
                    </div>
                    <!-- 히든 인풋 -->
                    <input type="hidden" id="edit-comment-id">
                    <input type="hidden" id="edit-comment-article-id">
                    <!-- 전송 버튼 -->
                    <button type="button" class="btn btn-primary"
                            id="comment-update-btn">수정 완료</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    {
        // 모달 요소 선택
        const commentEditModal = document.querySelector("#comment-edit-modal");
        // 모달 이벤트 감지
        commentEditModal.addEventListener("show.bs.modal", function(event) {
            // 1. 트리거 버튼 선택
            const triggerBtn = event.relatedTarget;

            // 2. 데이터 가져오기
            // data- 로 가져온 값들을 사용한다.
            const id = triggerBtn.getAttribute("data-bs-id");
            const nickname = triggerBtn.getAttribute("data-bs-nickname");
            const body = triggerBtn.getAttribute("data-bs-body");
            const articleId = triggerBtn.getAttribute("data-bs-article-id");

            // 3. 수정 폼에 데이터 반영
            // 가져온 데이터를 반영한다.
            document.querySelector("#edit-comment-nickname").value = nickname;
            document.querySelector("#edit-comment-body").value = body;
            document.querySelector("#edit-comment-id").value = id;
            document.querySelector("#edit-comment-article-id").value = articleId;
        });
    }
    {
        // 수정 완료 버튼 선택
        const commentUpdateBtn = document.querySelector("#comment-update-btn");
        // 클릭 이벤트 처리
        commentUpdateBtn.addEventListener("click", function() {
            // 수정 댓글 객체 생성
            //
            const comment = {
                id: document.querySelector("#edit-comment-id").value,
                nickname: document.querySelector("#edit-comment-nickname").value,
                body: document.querySelector("#edit-comment-body").value,
                article_id: document.querySelector("#edit-comment-article-id").value
            };
            console.log(comment);
            // 수정 REST API 호출
            const url = "/api/comments/" + comment.id;
            fetch(url, {
                method: "PATCH",     // PATCH 요청
                headers: {           // 전송 데이터 타입(JSON) 정보
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(comment) // JSON 문자열로 변환하여 전송
            }).then(response => {
                // HTTP 응답 코드에 따른 메시지 출력
                const msg = (response.ok) ? "댓글이 수정됐습니다." : "댓글 수정 실패..!";
                alert(msg);
                // 현재 페이지 새로고침
                window.location.reload();
            });
        });
    }

    // <!-- 댓글 삭제 -->
    {
        // 삭제 버튼 선택
        const commentDeleteBtns = document.querySelectorAll(".comment-delete-btn");
        //        // 삭제 이벤트 처리
        //        commentDeleteBtn.addEventListener("click",function(){
        //           console.log("삭제버튼이 클릭되었습니다."); // 클릭 이벤트 확인하기
        //        });
        // 여러개의 삭제 버튼을 선택해야 함으로 반복처리를 위한 foreach 메서드를 사용합니다.
        commentDeleteBtns.forEach(btn => { // 삭제 버튼 수만큼 반복합니다.
            btn.addEventListener("click",(event)=>{ // 각 버튼의 이벤트 처리를 진행함.
                // 이벤트 발생요소를 선택함
                const commentDeleteBtn = event.target; // 삭제 버튼의 변수화 진행
                // 삭제 댓글 id를 가져오기
                const commentId = commentDeleteBtn.getAttribute("data-comment-id");
                console.log(`삭제 버튼 클릭: ${commentId}번 댓글`);
                // 삭제 Rest api 호출
                const url = `/api/comments/${commentId}`;
                fetch(url, {
                   method: "DELETE"
                }).then(response => {
                    // 댓글 삭제 실패 처리
                     if (!response.ok) {
                          alert("댓글 삭제 실패");
                          return;
                     }
                    // 삭제 성공 시 댓글을 화면에서 지우고 메시지 창 띄우기
                    const target = document.querySelector(`#comments-${commentId}`);
                    target.remove();
                    const msg = `${commentId}번 댓글을 삭제하였습니다`;
                    alert(msg);
                    // 현재 페이지 새로 고침
                    window.location.reload();
                });
            });
        });
    }
</script>
<!-- 모달 이벤트 처리 (모달 관련 작업을 진행한다.)-->
